#pragma version 9

// This TEAL was generated by TEALScript v0.66.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp call_OptIn

NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64,application)void
abi_route_createApplication:
	// maxBet: uint64
	txna ApplicationArgs 3
	btoi

	// minBet: uint64
	txna ApplicationArgs 2
	btoi

	// beaconApp: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute createApplication(uint64,uint64,application)void
	callsub createApplication
	int 1
	return

createApplication:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 0

	// contracts/coinFlip.algo.ts:32
	// this.beaconApp.value = beaconApp
	byte 0x626561636f6e417070 // "beaconApp"
	frame_dig -1 // beaconApp: application
	app_global_put

	// contracts/coinFlip.algo.ts:33
	// this.minBet.value = minBet
	byte 0x6d696e426574 // "minBet"
	frame_dig -2 // minBet: uint64
	app_global_put

	// contracts/coinFlip.algo.ts:34
	// this.maxBet.value = maxBet
	byte 0x6d6178426574 // "maxBet"
	frame_dig -3 // maxBet: uint64
	app_global_put

	// contracts/coinFlip.algo.ts:36
	// this.betsOutstanding.value = 0
	byte 0x626574734f75747374616e64696e67 // "betsOutstanding"
	int 0
	app_global_put
	retsub

// optInToApplication()void
//
// // override to give user a local state
abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

optInToApplication:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0
	retsub

getRandomness:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x

	// contracts/coinFlip.algo.ts:43
	// r: bytes = sendMethodCall<[uint64, bytes], bytes>({
	//       applicationID: this.beaconApp.value,
	//       name: 'must_get',
	//       methodArgs: [round, concat(this.txn.sender, itob(round))],
	//       fee: 0,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "must_get(uint64,byte[])byte[]"
	itxn_field ApplicationArgs

	// contracts/coinFlip.algo.ts:44
	// applicationID: this.beaconApp.value
	byte 0x626561636f6e417070 // "beaconApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/coinFlip.algo.ts:46
	// methodArgs: [round, concat(this.txn.sender, itob(round))]
	frame_dig -1 // round: uint64
	itob
	itxn_field ApplicationArgs
	txn Sender
	frame_dig -1 // round: uint64
	itob
	concat
	dup
	len
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// contracts/coinFlip.algo.ts:47
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	extract 2 0
	frame_bury 0 // r: bytes

	// contracts/coinFlip.algo.ts:50
	// return r;
	frame_dig 0 // r: bytes

	// set the subroutine return value
	frame_bury 0
	retsub

deleteLocalStorage:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0

	// contracts/coinFlip.algo.ts:54
	// this.commitmentRound(this.txn.sender).delete()
	txn Sender
	byte 0x636f6d6d69746d656e74526f756e64 // "commitmentRound"
	app_local_del

	// contracts/coinFlip.algo.ts:55
	// this.bet(this.txn.sender).delete()
	txn Sender
	byte 0x626574 // "bet"
	app_local_del

	// contracts/coinFlip.algo.ts:56
	// this.betOutcome(this.txn.sender).delete()
	txn Sender
	byte 0x6265744f7574636f6d65 // "betOutcome"
	app_local_del
	retsub

// flipCoin(uint64,pay)uint64
//
// // returns round where result will be decided
abi_route_flipCoin:
	// The ABI return prefix
	byte 0x151f7c75

	// outcome: uint64
	txna ApplicationArgs 1
	btoi

	// bet: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute flipCoin(uint64,pay)uint64
	callsub flipCoin
	itob
	concat
	log
	int 1
	return

flipCoin:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 1; byte 0x

	// contracts/coinFlip.algo.ts:62
	// verifyTxn(bet, {
	//       amount: { greaterThanEqualTo: this.minBet.value, lessThanEqualTo: this.maxBet.value },
	//       receiver: this.app.address,
	//       sender: this.txn.sender,
	//     })
	// verify amount
	frame_dig -1 // bet: pay
	gtxns Amount
	byte 0x6d696e426574 // "minBet"
	app_global_get
	>=
	assert
	frame_dig -1 // bet: pay
	gtxns Amount
	byte 0x6d6178426574 // "maxBet"
	app_global_get
	<=
	assert

	// verify receiver
	frame_dig -1 // bet: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // bet: pay
	gtxns Sender
	txn Sender
	==
	assert

	// contracts/coinFlip.algo.ts:69
	// assert(!this.commitmentRound(this.txn.sender).exists)
	txn Sender
	txna Applications 0
	byte 0x636f6d6d69746d656e74526f756e64 // "commitmentRound"
	app_local_get_ex
	swap
	pop
	!
	assert

	// contracts/coinFlip.algo.ts:71
	// this.bet(this.txn.sender).value = bet.amount
	txn Sender
	byte 0x626574 // "bet"
	frame_dig -1 // bet: pay
	gtxns Amount
	app_local_put

	// contracts/coinFlip.algo.ts:72
	// this.betOutcome(this.txn.sender).value = outcome
	txn Sender
	byte 0x6265744f7574636f6d65 // "betOutcome"
	frame_dig -2 // outcome: uint64
	app_local_put

	// contracts/coinFlip.algo.ts:74
	// commitmentRound = globals.round + 3
	global Round
	int 3
	+
	frame_bury 0 // commitmentRound: uint64

	// contracts/coinFlip.algo.ts:76
	// this.commitmentRound(this.txn.sender).value = commitmentRound
	txn Sender
	byte 0x636f6d6d69746d656e74526f756e64 // "commitmentRound"
	frame_dig 0 // commitmentRound: uint64
	app_local_put

	// contracts/coinFlip.algo.ts:79
	// this.betsOutstanding.value = this.betsOutstanding.value + 1
	byte 0x626574734f75747374616e64696e67 // "betsOutstanding"
	byte 0x626574734f75747374616e64696e67 // "betsOutstanding"
	app_global_get
	int 1
	+
	app_global_put

	// contracts/coinFlip.algo.ts:81
	// return commitmentRound;
	frame_dig 0 // commitmentRound: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// settle(application)(uint64,uint64)
//
// // eslint-disable-next-line no-unused-vars
abi_route_settle:
	// The ABI return prefix
	byte 0x151f7c75

	// beaconApp: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute settle(application)(uint64,uint64)
	callsub settle
	concat
	log
	int 1
	return

settle:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 1; byte 0x; dupn 3

	// contracts/coinFlip.algo.ts:86
	// r = this.getRandomness(this.commitmentRound(this.txn.sender).value)
	txn Sender
	byte 0x636f6d6d69746d656e74526f756e64 // "commitmentRound"
	app_local_get
	callsub getRandomness
	frame_bury 0 // r: byte[]

	// contracts/coinFlip.algo.ts:87
	// c = getbit(r, 0)
	frame_dig 0 // r: byte[]
	int 0
	getbit
	frame_bury 1 // c: uint64

	// contracts/coinFlip.algo.ts:88
	// predictedOutcome = this.betOutcome(this.txn.sender).value
	txn Sender
	byte 0x6265744f7574636f6d65 // "betOutcome"
	app_local_get
	frame_bury 2 // predictedOutcome: uint64

	// contracts/coinFlip.algo.ts:90
	// result = <BetResult>{
	//       won: 0,
	//       amount: this.bet(this.txn.sender).value,
	//     }
	byte 0x0000000000000000
	txn Sender
	byte 0x626574 // "bet"
	app_local_get
	itob
	concat
	frame_bury 3 // result: { won: uint64; amount: uint64; }

	// if0_condition
	// contracts/coinFlip.algo.ts:95
	// (c && predictedOutcome === 1) || (!c && predictedOutcome === 0)
	frame_dig 1 // c: uint64
	dup
	bz skip_and0
	frame_dig 2 // predictedOutcome: uint64
	int 1
	==
	&&

skip_and0:
	dup
	bnz skip_or0
	frame_dig 1 // c: uint64
	!
	dup
	bz skip_and1
	frame_dig 2 // predictedOutcome: uint64
	int 0
	==
	&&

skip_and1:
	||

skip_or0:
	bz if0_end

	// if0_consequent
	// contracts/coinFlip.algo.ts:96
	// sendPayment({
	//         receiver: this.txn.sender,
	//         amount: this.bet(this.txn.sender).value * 2,
	//         fee: 0,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/coinFlip.algo.ts:97
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/coinFlip.algo.ts:98
	// amount: this.bet(this.txn.sender).value * 2
	txn Sender
	byte 0x626574 // "bet"
	app_local_get
	int 2
	*
	itxn_field Amount

	// contracts/coinFlip.algo.ts:99
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/coinFlip.algo.ts:102
	// result = <BetResult>{
	//         won: 1,
	//         amount: this.bet(this.txn.sender).value * 2,
	//       }
	byte 0x0000000000000001
	txn Sender
	byte 0x626574 // "bet"
	app_local_get
	int 2
	*
	itob
	concat
	frame_bury 3 // result: { won: uint64; amount: uint64; }

if0_end:
	// contracts/coinFlip.algo.ts:109
	// this.deleteLocalStorage()
	callsub deleteLocalStorage

	// contracts/coinFlip.algo.ts:112
	// this.betsOutstanding.value = this.betsOutstanding.value - 1
	byte 0x626574734f75747374616e64696e67 // "betsOutstanding"
	byte 0x626574734f75747374616e64696e67 // "betsOutstanding"
	app_global_get
	int 1
	-
	app_global_put

	// contracts/coinFlip.algo.ts:114
	// return result;
	frame_dig 3 // result: { won: uint64; amount: uint64; }

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

create_NoOp:
	method "createApplication(application,uint64,uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "flipCoin(pay,uint64)uint64"
	method "settle(application)(uint64,uint64)"
	txna ApplicationArgs 0
	match abi_route_flipCoin abi_route_settle
	err

call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match abi_route_optInToApplication
	err